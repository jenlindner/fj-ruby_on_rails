Intro - enough ruby to do the exercises with: variables, methods, puts, hashes.

Maybe color-code these, for things that manage your app like rake, your app code, 
your config code, and your test code.

1. Tests -- could start with this. it will be the method we're using in all the exercises. 
Give example of BDD, have a test that won't work until there's a method they have 
to write that makes it work. Something relevant to user experience. 

# As a citizen
# I want to be informed about what affects me
# So I read about what is happening in the world

# Given we need to cross the bridges in our city
# When one collapses
# Then I need to know all about it, including if anyone I care about was injured

# code - 5 W's are present or test fails
# code - page needs to update with new info or test fails
# code - context provided - failing civil grade on the bridge - or test fails


2. Gems and Bundle

a hash that contains sets of gems; a bundle method that will choke on incompatible versions, 
requires updating. Actually it would make sense to have a gem conflict where you have to 
update your hash and freeze the version numbers to make it work. can the gems change anything 
visible in whatevethe demo app is?

3. Rails, Rake and scaffold

if they have rails installed, test some commands. rails new, rails serve, rake db:create, scaffold. 

if not do exercises that simulate these things.



4. Rails

regexes that represent controller actions maybe, and converting variables into tags 

5. ORM

a method that migrates up a table, adds column, adds an association. methods that return
properties showing the new column and association. Or two, a migrate up and a migrate down, showing you
how your database evolves.

6. MVC  
Change the db and reflect the change. One action to set, another to read. Use layouts and partials 
in your view, return json (very useful for data visualizations, for example)

7. Security

session = {}

session[:user_id] = "innocent_bystander"

puts 'hello jen'
puts session

#write method to try to hijack a session

csrf = "Z%F%^&%^CTYFTR%^$%X^TRDFGDE%^E"

#write method that won't return success unless passed this

8. Optimization

N+1 queries and eager loading with Rails, indexing slow queries, using memcache

9. Deploy
A method that simulates Capistrano, uses cap_deploy: target. exercise: to have something work in 
stage and break in production, and need people to fix their environment settings - like the wrong 
web service - not their app code.

